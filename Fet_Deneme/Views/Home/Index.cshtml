@{
    ViewData["Title"] = "FET Ana Sayfa";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    body { background: #f3f3f3; }
    .nav-tabs .nav-link {
        color: #000 !important;
    }
    .nav-tabs .nav-link.active {
        color: #333 !important;
        background-color: #fff;
        border-color: #dee2e6 #dee2e6 #fff;
    }
    .nav-tabs .nav-link:hover {
        color: #333 !important;
    }
    .tab-content {
        background: #fff;
        border: 1px solid #dee2e6;
        border-top: none;
        border-radius: 0 0 0.5rem 0.5rem;
        padding: 1.5rem 1rem 1rem 1rem;
    }
    .custom-swal {
        height: 100% !important;
    }
</style>

<div class="container d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow p-4" style="min-width:340px; max-width:480px; width:100%;">
        <h5 class="card-title mb-2 text-center">
            <div id="fet-filename-bar" class="mb-3" style="display:none;">
                <span class="fw-bold" id="fet-current-filename"></span>
            </div>
        </h5>
        <ul class="nav nav-tabs mb-3" id="fetTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="dosya-tab" data-bs-toggle="tab" data-bs-target="#dosya" type="button" role="tab" aria-controls="dosya" aria-selected="true">Dosya</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="veri-tab" data-bs-toggle="tab" data-bs-target="#veri" type="button" role="tab" aria-controls="veri" aria-selected="false">Veri</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="derssaati-tab" data-bs-toggle="tab" data-bs-target="#derssaati" type="button" role="tab" aria-controls="derssaati" aria-selected="false">Ders Saati</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="program-tab" data-bs-toggle="tab" data-bs-target="#program" type="button" role="tab" aria-controls="program" aria-selected="false">Ders Programı</button>
            </li>
        </ul>
        <div class="tab-content" id="fetTabContent">
            <div class="tab-pane fade show active" id="dosya" role="tabpanel" aria-labelledby="dosya-tab">
                
                <div class="row g-2 mb-2">
                    <div class="col-6">
                        <button class="btn btn-primary w-100" onclick="fetNewProject()">Yeni</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100" onclick="fetOpenProject()">Aç</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-success w-100" id="fet-btn-save">Kaydet</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-warning w-100" id="fet-btn-saveas">Farklı Kaydet</button>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="veri" role="tabpanel" aria-labelledby="veri-tab">
                <div class="row g-2 mb-2">
                    <div class="col-6">
                        <button class="btn btn-secondary w-100" onclick="window.fetShowData('subjects')">Ders Adları</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100" onclick="window.fetShowData('teachers')">Öğretmenler</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100" onclick="window.fetShowData('students')">Öğrenciler</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100" onclick="window.fetShowData('activities')">Etkinlikler</button>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="derssaati" role="tabpanel" aria-labelledby="derssaati-tab">
                <div class="row g-2 mb-2">
                    <div class="col-6">
                        <button class="btn btn-secondary w-100">Tümü</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100">Ara</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100">Öğretmenler</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-secondary w-100">Öğrenciler</button>
                    </div>                    <div class="col-6">
                        <button class="btn btn-secondary w-100">Dersler</button>
                    </div>
                    <div class="col-6">
                        <div class="dropdown">
                            <button class="btn btn-secondary w-100 dropdown-toggle" type="button" id="gelismisDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Gelişmiş
                            </button>
                            <ul class="dropdown-menu w-100" aria-labelledby="gelismisDropdown">
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintBasicCompulsoryTime')">Temel Zorunlu Zaman</a></li>
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintStudentsMaxHoursDaily')">Öğrenciler Günlük Maksimum Saat</a></li>
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintStudentsMaxHoursContinuously')">Öğrenciler Aralıksız Maksimum Saat</a></li>
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintMinDaysBetweenActivities')">Etkinlikler Arası Minimum Gün</a></li>
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintBreakTimes')">Kapatılacak Zaman Bloğu</a></li>
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintActivityPreferredTimeSlots')">Etkinlik Tercihli Zaman Slotları</a></li>
                                <li><a class="dropdown-item" href="#" onclick="openConstraintDialog('ConstraintActivitiesNotOverlapping')">Etkinlikler Çakışmasın</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="program" role="tabpanel" aria-labelledby="program-tab">
                <div class="d-grid gap-2">
                    <button class="btn btn-success w-100">Oluştur</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
window.fetCurrentFileName = null;
window.fetCurrentXmlContent = null;

window.updateFileBar = function() {
    if (window.fetCurrentFileName) {
        document.getElementById('fet-filename-bar').style.display = '';
        document.getElementById('fet-current-filename').textContent = window.fetCurrentFileName;
    } else {
        document.getElementById('fet-filename-bar').style.display = 'none';
    }
}

window.saveToLocal = function() {
    if (window.fetCurrentFileName && window.fetCurrentXmlContent) {
        localStorage.setItem('fetFileName', window.fetCurrentFileName);
        localStorage.setItem('fetXmlContent', window.fetCurrentXmlContent);
    } else {
        localStorage.removeItem('fetFileName');
        localStorage.removeItem('fetXmlContent');
    }
}

window.loadFromLocal = function() {
    const fileName = localStorage.getItem('fetFileName');
    const xmlContent = localStorage.getItem('fetXmlContent');
    if (fileName && xmlContent) {
        window.fetCurrentFileName = fileName;
        window.fetCurrentXmlContent = xmlContent;
        // Sunucuya da yükle (Aç mantığıyla)
        fetch('/Home/OpenProject?fileName=' + encodeURIComponent(fileName), {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(xmlContent)
        }).then(r => r.json()).then(data => {
            if (data.success) {
                window.updateFileBar();
            }
        });
    }
}

window.fetNewProject = function() {
    fetch('/Home/NewProject', { method: 'POST' })
        .then( r => r.json())
        .then(data => {
            if (data.success) {
                window.fetCurrentFileName = data.fileName;
                window.fetCurrentXmlContent = data.xmlContent || null;
                window.updateFileBar();
                window.saveToLocal();
                Swal.fire('Yeni proje oluşturuldu', '', 'success');
            }
        });
}

window.fetOpenProject = function() {
    Swal.fire({
        title: 'Proje Aç',
        html: '<input type="file" id="fetFileInput" accept=".fet,.xml" class="swal2-input" />',
        showCancelButton: true,
        confirmButtonText: 'Aç',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            const fileInput = Swal.getPopup().querySelector('#fetFileInput');
            if (!fileInput.files[0]) {
                Swal.showValidationMessage('Lütfen bir .fet dosyası seçin');
            }
            return fileInput.files[0];
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const file = result.value;
            const reader = new FileReader();
            reader.onload = function(e) {
                window.fetCurrentXmlContent = e.target.result;
                window.fetCurrentFileName = file.name;
                // Browser ortamında file.path yoktur, ama varsa backend'e ilet
                let filePath = file.path || '';
                fetch('/Home/OpenProject?fileName=' + encodeURIComponent(file.name) + '&filePath=' + encodeURIComponent(filePath), {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(window.fetCurrentXmlContent)
                }).then(r => r.json()).then(data => {
                    if (data.success) {
                        window.updateFileBar();
                        window.saveToLocal();
                        Swal.fire('Proje açıldı', '', 'success');
                    }
                });
            };
            reader.readAsText(file);
        }
    });
}

document.getElementById('fet-btn-save').onclick = function() {
    if (!window.fetCurrentFileName) return;
    fetch('/Home/SaveProject', { method: 'POST' })
        .then(r => r.json())
        .then(data => {
            if (data.success) {
                Swal.fire('Kaydedildi', '', 'success');
                window.saveToLocal();
            }
        });
};

document.getElementById('fet-btn-saveas').onclick = function() {
    if (!window.fetCurrentFileName) return;
    if (window.showSaveFilePicker) {
        (async () => {
            try {
                const opts = {
                    suggestedName: window.fetCurrentFileName,
                    types: [{ description: 'FET XML', accept: { 'application/xml': ['.fet', '.xml'] } }]
                };
                const handle = await window.showSaveFilePicker(opts);
                const writable = await handle.createWritable();
                await writable.write(window.fetCurrentXmlContent || '');
                await writable.close();
                window.fetCurrentFileName = handle.name;
                window.updateFileBar();
                window.saveToLocal();
                Swal.fire('Farklı kaydedildi', '', 'success');
            } catch (e) {
                Swal.fire('İşlem iptal edildi', '', 'info');
            }
        })();
    } else {
        Swal.fire({
            title: 'Farklı Kaydet',
            input: 'text',
            inputLabel: 'Kaydetmek istediğiniz tam dosya yolu',
            inputValue: window.fetCurrentFileName,
            showCancelButton: true,
            confirmButtonText: 'Kaydet',
            cancelButtonText: 'İptal',
            inputPlaceholder: 'C:\\Users\\kullanici\\Desktop\\dosya.fet'
        }).then((result) => {
            if (result.isConfirmed && result.value) {
                fetch('/Home/SaveProjectAs', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        xmlContent: window.fetCurrentXmlContent || '',
                        filePath: result.value
                    })
                }).then (r => r.json()).then(data => {
                    if (data.success) {
                        window.fetCurrentFileName = data.fileName;
                        window.updateFileBar();
                        window.saveToLocal();
                        Swal.fire('Farklı kaydedildi', '', 'success');
                    } else {
                        Swal.fire('Hata', data.message || 'Kaydedilemedi', 'error');
                    }
                });
            }
        });
    }
};

window.fetImportSubjectsCsv = function() {
    Swal.fire({
        title: 'Ders adlarını CSV dosyasından al',
        html: '<input type="file" id="fetCsvInput" accept=".csv,text/csv" class="swal2-input" />',
        showCancelButton: true,
        confirmButtonText: 'İçe Aktar',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            const fileInput = Swal.getPopup().querySelector('#fetCsvInput');
            if (!fileInput.files[0]) {
                Swal.showValidationMessage('Lütfen bir CSV dosyası seçin');
            }
            return fileInput.files[0];
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const file = result.value;
            const reader = new FileReader();
            reader.onload = function(e) {
                const csvContent = e.target.result;
                fetch('/Home/ImportSubjectsCsv', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        csvContent: csvContent,
                        fileName: window.fetCurrentFileName || ''
                    })
                }).then(r => r.json()).then(data => {
                    if (data.success) {
                        window.fetCurrentXmlContent = data.xmlContent;
                        window.saveToLocal();
                        Swal.fire('Dersler başarıyla içe aktarıldı', `${data.added} ders eklendi.`, 'success');
                    } else {
                        Swal.fire('Hata', data.message || 'İçe aktarılamadı', 'error');
                    }
                });
            };
            reader.readAsText(file);
        }
    });
}

window.fetImportTeachersCsv = function() {
    Swal.fire({
        title: 'Öğretmen adlarını CSV dosyasından al',
        html: '<input type="file" id="fetCsvInputTeacher" accept=".csv,text/csv" class="swal2-input" />',
        showCancelButton: true,
        confirmButtonText: 'İçe Aktar',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            const fileInput = Swal.getPopup().querySelector('#fetCsvInputTeacher');
            if (!fileInput.files[0]) {
                Swal.showValidationMessage('Lütfen bir CSV dosyası seçin');
            }
            return fileInput.files[0];
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const file = result.value;
            const reader = new FileReader();
            reader.onload = function(e) {
                const csvContent = e.target.result;
                fetch('/Home/ImportTeachersCsv', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        csvContent: csvContent,
                        fileName: window.fetCurrentFileName || ''
                    })
                }).then(r => r.json()).then(data => {
                    if (data.success) {
                        window.fetCurrentXmlContent = data.xmlContent;
                        window.saveToLocal();
                        Swal.fire('Öğretmenler başarıyla içe aktarıldı', `${data.added} öğretmen eklendi.`, 'success');
                    } else {
                        Swal.fire('Hata', data.message || 'İçe aktarılamadı', 'error');
                    }
                });
            };
            reader.readAsText(file);
        }
    });
}

window.fetImportStudentsCsv = function() {
    Swal.fire({
        title: 'Öğrenci (Yıl/Grup/Altgrup) adlarını CSV dosyasından al',
        html: '<input type="file" id="fetCsvInputStudents" accept=".csv,text/csv" class="swal2-input" />',
        showCancelButton: true,
        confirmButtonText: 'İçe Aktar',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            const fileInput = Swal.getPopup().querySelector('#fetCsvInputStudents');
            if (!fileInput.files[0]) {
                Swal.showValidationMessage('Lütfen bir CSV dosyası seçin');
            }
            return fileInput.files[0];
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const file = result.value;
            const reader = new FileReader();
            reader.onload = function(e) {
                const csvContent = e.target.result;
                fetch('/Home/ImportStudentsCsv', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        csvContent: csvContent,
                        fileName: window.fetCurrentFileName || ''
                    })
                }).then(r => r.json()).then(data => {
                    if (data.success) {
                        window.fetCurrentXmlContent = data.xmlContent;
                        window.saveToLocal();
                        Swal.fire('Öğrenciler başarıyla içe aktarıldı', `${data.added} öğrenci/yıl/grup/altgrup eklendi.`, 'success');
                    } else {
                        Swal.fire('Hata', data.message || 'İçe aktarılamadı', 'error');
                    }
                });
            };
            reader.readAsText(file);
        }
    });
}

window.fetImportActivitiesCsv = function() {
    Swal.fire({
        title: 'Etkinlikleri (Activities) CSV dosyasından al',
        html: '<input type="file" id="fetCsvInputActivities" accept=".csv,text/csv" class="swal2-input" />',
        showCancelButton: true,
        confirmButtonText: 'İçe Aktar',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            const fileInput = Swal.getPopup().querySelector('#fetCsvInputActivities');
            if (!fileInput.files[0]) {
                Swal.showValidationMessage('Lütfen bir CSV dosyası seçin');
            }
            return fileInput.files[0];
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const file = result.value;
            const reader = new FileReader();
            reader.onload = function(e) {
                const csvContent = e.target.result;
                fetch('/Home/ImportActivitiesCsv', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        csvContent: csvContent,
                        fileName: window.fetCurrentFileName || ''
                    })
                }).then(r => r.json()).then(data => {
                    if (data.success) {
                        window.fetCurrentXmlContent = data.xmlContent;
                        window.saveToLocal();
                        Swal.fire('Etkinlikler başarıyla içe aktarıldı', `${data.added} etkinlik eklendi.`, 'success');
                    } else {
                        Swal.fire('Hata', data.message || 'İçe aktarılamadı', 'error');
                    }
                });
            };
            reader.readAsText(file);
        }
    });
}

window.fetImportMultipleCsv = function() {
    Swal.fire({
        title: 'Çoklu CSV İçe Aktar',
        html: '<input type="file" id="fetCsvInputMulti" accept=".csv,text/csv" class="swal2-input" multiple />',
        showCancelButton: true,
        confirmButtonText: 'İçe Aktar',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            const fileInput = Swal.getPopup().querySelector('#fetCsvInputMulti');
            if (!fileInput.files.length) {
                Swal.showValidationMessage('Lütfen en az bir CSV dosyası seçin');
            }
            return fileInput.files;
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const files = Array.from(result.value);
            const fileMap = {};
            files.forEach(f => fileMap[f.name.toLowerCase()] = f);
            const importOrder = [
                { name: 'subjects.csv', endpoint: '/Home/ImportSubjectsCsv', label: 'Dersler' },
                { name: 'teachers.csv', endpoint: '/Home/ImportTeachersCsv', label: 'Öğretmenler' },
                { name: 'student.csv', endpoint: '/Home/ImportStudentsCsv', label: 'Öğrenciler' },
                { name: 'activities.csv', endpoint: '/Home/ImportActivitiesCsv', label: 'Etkinlikler' }
            ];
            let results = [];
            let lastXml = window.fetCurrentXmlContent;
            let lastFileName = window.fetCurrentFileName || '';
            let chain = Promise.resolve();
            importOrder.forEach(io => {
                if (fileMap[io.name]) {
                    chain = chain.then(() => new Promise((resolve) => {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            fetch(io.endpoint, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    csvContent: e.target.result,
                                    fileName: lastFileName
                                })
                            }).then(r => r.json()).then(data => {
                                if (data.success) {
                                    lastXml = data.xmlContent;
                                    window.fetCurrentXmlContent = lastXml;
                                    window.saveToLocal();
                                    results.push(io.label + ' ✓ (' + (data.added || 0) + ' eklendi)');
                                } else {
                                    results.push(io.label + ' × (Hata: ' + (data.message || 'İçe aktarılamadı') + ')');
                                }
                                resolve();
                            });
                        };
                        reader.readAsText(fileMap[io.name]);
                    }));
                }
            });
            chain.then(() => {
                Swal.fire('Çoklu İçe Aktar Sonucu', results.join('<br>'), 'info');
            });
        }
    });
}

window.addEventListener('DOMContentLoaded', function() {
    window.loadFromLocal();
});

window.updateFileBar();

window.fetShowData = function(dataType) {
    if (!window.fetCurrentFileName) {
        Swal.fire('Hata', 'Önce bir proje açın veya oluşturun', 'error');
        return;
    }
    fetch('/Home/ShowData?dataType=' + dataType)
        .then(r => r.json())
        .then(data => {
            if (data.success) {
                let title = '';
                let htmlContent = '';
                switch(dataType) {
                    case 'subjects':
                        title = 'Ders Adları';
                        if (data.data.length === 0) {
                            htmlContent = '<div class="alert alert-info">Henüz ders tanımlanmamış.</div>';
                        } else {
                            htmlContent = '<table class="table table-striped table-sm"><thead><tr><th>Adı</th><th>Uzun Adı</th><th>Kod</th><th>Açıklama</th></tr></thead><tbody>';
                            data.data.forEach(subject => {
                                htmlContent += `<tr><td>${subject.name || ''}</td><td>${subject.longName || ''}</td><td>${subject.code || ''}</td><td>${subject.comments || ''}</td></tr>`;
                            });
                            htmlContent += '</tbody></table>';
                        }
                        break;
                    case 'teachers':
                        title = 'Öğretmenler';
                        if (data.data.length === 0) {
                            htmlContent = '<div class="alert alert-info">Henüz öğretmen tanımlanmamış.</div>';
                        } else {
                            htmlContent = '<table class="table table-striped table-sm"><thead><tr><th>Adı</th><th>Hedef Ders Saati</th><th>Açıklama</th></tr></thead><tbody>';
                            data.data.forEach(teacher => {
                                htmlContent += `<tr><td>${teacher.name || ''}</td><td>${teacher.targetNumberOfHours || '0'}</td><td>${teacher.comments || ''}</td></tr>`;
                            });
                            htmlContent += '</tbody></table>';
                        }
                        break;
                    case 'students':
                        title = 'Öğrenciler (Yıl/Grup/Altgruplar)';
                        if (data.data.length === 0) {
                            htmlContent = '<div class="alert alert-info">Henüz öğrenci grupları tanımlanmamış.</div>';
                        } else {
                            htmlContent = '<ul class="list-group">';
                            data.data.forEach(year => {
                                htmlContent += `<li class="list-group-item">
                                    <strong>Yıl: ${year.name}</strong> (${year.numberOfStudents} öğrenci)
                                    ${year.groups && year.groups.length > 0 ? '<ul class="list-group mt-2">' : ''}`;
                                if (year.groups && year.groups.length > 0) {
                                    year.groups.forEach(group => {
                                        htmlContent += `<li class="list-group-item">
                                            <strong>Grup: ${group.name}</strong> (${group.numberOfStudents} öğrenci)
                                            ${group.subgroups && group.subgroups.length > 0 ? '<ul class="list-group mt-2">' : ''}`;
                                        if (group.subgroups && group.subgroups.length > 0) {
                                            group.subgroups.forEach(subgroup => {
                                                htmlContent += `<li class="list-group-item">
                                                    <strong>Altgrup: ${subgroup.name}</strong> (${subgroup.numberOfStudents} öğrenci)
                                                </li>`;
                                            });
                                            htmlContent += '</ul>';
                                        }
                                        htmlContent += '</li>';
                                    });
                                    htmlContent += '</ul>';
                                }
                                htmlContent += '</li>';
                            });
                            htmlContent += '</ul>';
                        }
                        break;
                    case 'activities':
                        title = 'Etkinlikler';
                        if (data.data.length === 0) {
                            htmlContent = '<div class="alert alert-info">Henüz etkinlik tanımlanmamış.</div>';
                        } else {
                            htmlContent = '<table class="table table-striped table-sm"><thead><tr><th>ID</th><th>Öğretmen</th><th>Ders</th><th>Öğrenci Sayısı</th><th>Süre</th><th>Durum</th></tr></thead><tbody>';
                            data.data.forEach(act => {
                                let ogrCell = (act.studentCount && act.studentCount > 0) ? act.studentCount : '0';
                                htmlContent += `<tr>
                                    <td>${act.id}</td>
                                    <td>${act.teacher || ''}</td>
                                    <td>${act.subject || ''}</td>
                                    <td>${ogrCell}</td>
                                    <td>${act.duration}/${act.totalDuration || act.duration}</td>
                                    <td>${act.active ? '<span class="badge bg-success">Aktif</span>' : '<span class="badge bg-danger">Pasif</span>'}</td>
                                </tr>`;
                            });
                            htmlContent += '</tbody></table>';
                        }
                        break;
                }
                Swal.fire({
                    title: title,
                    html: htmlContent,
                    width: '800px',
                    heightAuto: false,
                    showConfirmButton: true,
                    confirmButtonText: 'Kapat',
                    customClass: {
                        popup: 'swal-wide',
                        htmlContainer: 'swal-scrollable',
                        content: 'text-start'
                    }
                });
            } else {
                Swal.fire('Hata', data.message || 'Veriler gösterilemiyor', 'error');
            }
        })
        .catch(err => {
            console.error(err);
            Swal.fire('Sunucu Hatası', 'Veri gösterme işlemi başarısız: ' + err.message, 'error');
        });
};

window.fetShowDays = function() {
    if (!window.fetCurrentFileName) {
        Swal.fire('Hata', 'Önce bir proje açın veya oluşturun', 'error');
        return;
    }
    fetch('/Home/ShowData?dataType=days')
        .then(r => r.json())
        .then(data => {
            let items = (data.success && data.data) ? data.data : [];
            let html = `
<div class="mb-2 d-flex align-items-center">
    <label class="me-2">Days:</label>
    <input type="number" class="form-control form-control-sm" style="width:90px;" min="1" max="14" value="${items.length}" id="fet-spin-main-days" />
</div>
<ul class="list-group mb-2" id="fet-list-main-days" style="height:220px;overflow:auto;">
    ${items.map((item, i) => `<li class="list-group-item fet-selectable text-start" data-idx="${i}">${i+1}. N: ${item.name || ''}, LN: ${item.longName || item.name || ''}</li>`).join('')}
</ul>
<div class="d-flex gap-2">
    <button class="btn btn-outline-success btn-sm w-100" id="fet-btn-add-day">Insert</button>
    <button class="btn btn-outline-warning btn-sm w-100" id="fet-btn-edit-day">Düzenle</button>
    <button class="btn btn-outline-danger btn-sm w-100" id="fet-btn-del-day">Kaldır</button>
</div>`;
            Swal.fire({
                title: 'Haftanın günleri',
                html: html,
                width: '40%',
                heightAuto: false,
                showConfirmButton: false,
                customClass: {
                    popup: 'swal-wide',
                    htmlContainer: 'swal-scrollable',
                    content: 'text-start'
                },
                didOpen: () => {
                    let selectedIdx = 0;
                    const list = document.getElementById('fet-list-main-days');
                    if (list) {
                        const itemsEls = list.querySelectorAll('.fet-selectable');
                        if (itemsEls.length > 0) itemsEls[0].classList.add('active');
                        itemsEls.forEach(el => {
                            el.onclick = function() {
                                itemsEls.forEach(e => e.classList.remove('active'));
                                this.classList.add('active');
                                selectedIdx = parseInt(this.getAttribute('data-idx'));
                            };
                        });
                    }
                    // Number input değişimi
                    document.getElementById('fet-spin-main-days').onchange = function() {
                        let newCount = parseInt(this.value);
                        let diff = newCount - items.length;
                        if (diff > 0) {
                            // Ekle
                            let lastNum = items.length;
                            let addNext = (idx) => {
                                if (idx <= 0) { window.fetShowDays(); return; }
                                // FET algoritması: D{n+1}, Day {n+1}
                                let newName = `D${lastNum+1}`;
                                let newLongName = `Day ${lastNum+1}`;
                                fetch('/Home/AddDay', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ Name: newName, LongName: newLongName })
                                }).then(r => r.json()).then(j => {
                                    lastNum++;
                                    addNext(idx-1);
                                });
                            };
                            addNext(diff);
                        } else if (diff < 0) {
                            // Sil
                            let delNext = (idx) => {
                                if (idx <= 0) { window.fetShowDays(); return; }
                                fetch('/Home/DeleteDay', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ Index: items.length-idx })
                                }).then(r => r.json()).then(j => {
                                    delNext(idx-1);
                                });
                            };
                            delNext(-diff);
                        }
                    };
                    // Insert
                    document.getElementById('fet-btn-add-day').onclick = function() {
                        // FET algoritması: D{n+1}, Day {n+1}
                        let newName = `D${items.length+1}`;
                        let newLongName = `Day ${items.length+1}`;
                        Swal.fire({
                            title: 'Yeni Gün',
                            html: `<input id="fet-new-name-day" class="swal2-input" value="${newName}" placeholder="Kısa Ad"><input id="fet-new-longname-day" class="swal2-input" value="${newLongName}" placeholder="Uzun Ad">`,
                            focusConfirm: false,
                            preConfirm: () => {
                                return {
                                    name: document.getElementById('fet-new-name-day').value,
                                    longName: document.getElementById('fet-new-longname-day').value
                                };
                            }
                        }).then(res => {
                            if (res.isConfirmed && res.value.name) {
                                fetch('/Home/AddDay', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ Name: res.value.name, LongName: res.value.longName })
                                }).then(r => r.json()).then(j => {
                                    if (j.success) window.fetShowDays();
                                    else Swal.fire('Hata', j.message || 'Ekleme başarısız', 'error');
                                });
                            }
                        });
                    };
                    // Edit
                    document.getElementById('fet-btn-edit-day').onclick = function() {
                        if (list && list.querySelector('.active')) {
                            let idx = parseInt(list.querySelector('.active').getAttribute('data-idx'));
                            let item = items[idx];
                            Swal.fire({
                                title: 'Gün Düzenle',
                                html: `<input id="fet-edit-name-day" class="swal2-input" value="${item.name || ''}" placeholder="Kısa Ad"><input id="fet-edit-longname-day" class="swal2-input" value="${item.longName || item.name || ''}" placeholder="Uzun Ad">`,
                                focusConfirm: false,
                                preConfirm: () => {
                                    return {
                                        name: document.getElementById('fet-edit-name-day').value,
                                        longName: document.getElementById('fet-edit-longname-day').value
                                    };
                                }
                            }).then(res => {
                                if (res.isConfirmed && res.value.name) {
                                    fetch('/Home/EditDay', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ Index: idx, Name: res.value.name, LongName: res.value.longName })
                                    }).then(r => r.json()).then(j => {
                                        if (j.success) window.fetShowDays();
                                        else Swal.fire('Hata', j.message || 'Düzenleme başarısız', 'error');
                                    });
                                }
                            });
                        } else {
                            Swal.fire('Uyarı', 'Lütfen bir satır seçin', 'warning');
                        }
                    };
                    // Delete
                    document.getElementById('fet-btn-del-day').onclick = function() {
                        if (list && list.querySelector('.active')) {
                            let idx = parseInt(list.querySelector('.active').getAttribute('data-idx'));
                            Swal.fire({
                                title: 'Silmek istediğinize emin misiniz?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Evet, Sil',
                                cancelButtonText: 'İptal'
                            }).then(res => {
                                if (res.isConfirmed) {
                                    fetch('/Home/DeleteDay', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ Index: idx })
                                    }).then(r => r.json()).then(j => {
                                        if (j.success) window.fetShowDays();
                                        else Swal.fire('Hata', j.message || 'Silme başarısız', 'error');
                                    });
                                }
                            });
                        } else {
                            Swal.fire('Uyarı', 'Lütfen bir satır seçin', 'warning');
                        }
                    };
                }
            });
        });
};

window.fetShowHours = function() {
    if (!window.fetCurrentFileName) {
        Swal.fire('Hata', 'Önce bir proje açın veya oluşturun', 'error');
        return;
    }
    fetch('/Home/ShowData?dataType=hours')
        .then(r => r.json())
        .then(data => {
            let items = (data.success && data.data) ? data.data : [];
            let html = `
<div class="mb-2 d-flex align-items-center">
    <label class="me-2">Hours:</label>
    <input type="number" class="form-control form-control-sm" style="width:90px;" min="1" max="14" value="${items.length}" id="fet-spin-main-hours" />
</div>
<ul class="list-group mb-2" id="fet-list-main-hours" style="height:220px;overflow:auto;">
    ${items.map((item, i) => `<li class="list-group-item fet-selectable" data-idx="${i}">${i+1}. N: ${item.name || ''}, LN: ${item.longName || item.name || ''}</li>`).join('')}
</ul>
<div class="d-flex gap-2">
    <button class="btn btn-outline-success btn-sm w-100" id="fet-btn-add-hour">Insert</button>
    <button class="btn btn-outline-warning btn-sm w-100" id="fet-btn-edit-hour">Düzenle</button>
    <button class="btn btn-outline-danger btn-sm w-100" id="fet-btn-del-hour">Kaldır</button>
</div>`;
            Swal.fire({
                title: 'Saatler',
                html: html,
                width: '40%',
                heightAuto: false,
                showConfirmButton: false,
                customClass: {
                    popup: 'swal-wide',
                    htmlContainer: 'swal-scrollable',
                    content: 'text-start'
                },
                didOpen: () => {
                    let selectedIdx = 0;
                    const list = document.getElementById('fet-list-main-hours');
                    if (list) {
                        const itemsEls = list.querySelectorAll('.fet-selectable');
                        if (itemsEls.length > 0) itemsEls[0].classList.add('active');
                        itemsEls.forEach(el => {
                            el.onclick = function() {
                                itemsEls.forEach(e => e.classList.remove('active'));
                                this.classList.add('active');
                                selectedIdx = parseInt(this.getAttribute('data-idx'));
                            };
                        });
                    }
                    // Number input değişimi
                    document.getElementById('fet-spin-main-hours').onchange = function() {
                        let newCount = parseInt(this.value);
                        let diff = newCount - items.length;
                        if (diff > 0) {
                            // Ekle
                            let lastNum = items.length;
                            let addNext = (idx) => {
                                if (idx <= 0) { window.fetShowHours(); return; }
                                let newName = `H${lastNum+1}`;
                                let newLongName = `Hour ${lastNum+1}`;
                                fetch('/Home/AddHour', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ Name: newName, LongName: newLongName })
                                }).then(r => r.json()).then(j => {
                                    lastNum++;
                                    addNext(idx-1);
                                });
                            };
                            addNext(diff);
                        } else if (diff < 0) {
                            // Sil
                            let delNext = (idx) => {
                                if (idx <= 0) { window.fetShowHours(); return; }
                                fetch('/Home/DeleteHour', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ Index: items.length-idx })
                                }).then(r => r.json()).then(j => {
                                    delNext(idx-1);
                                });
                            };
                            delNext(-diff);
                        }
                    };
                    // Insert
                    document.getElementById('fet-btn-add-hour').onclick = function() {
                        let newName = `H${items.length+1}`;
                        let newLongName = `Hour ${items.length+1}`;
                        Swal.fire({
                            title: 'Yeni Saat',
                            html: `<input id="fet-new-name-hour" class="swal2-input" value="${newName}" placeholder="Kısa Ad"><input id="fet-new-longname-hour" class="swal2-input" value="${newLongName}" placeholder="Uzun Ad">`,
                            focusConfirm: false,
                            preConfirm: () => {
                                return {
                                    name: document.getElementById('fet-new-name-hour').value,
                                    longName: document.getElementById('fet-new-longname-hour').value
                                };
                            }
                        }).then(res => {
                            if (res.isConfirmed && res.value.name) {
                                fetch('/Home/AddHour', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ Name: res.value.name, LongName: res.value.longName })
                                }).then(r => r.json()).then(j => {
                                    if (j.success) window.fetShowHours();
                                    else Swal.fire('Hata', j.message || 'Ekleme başarısız', 'error');
                                });
                            }
                        });
                    };
                    // Edit
                    document.getElementById('fet-btn-edit-hour').onclick = function() {
                        if (list && list.querySelector('.active')) {
                            let idx = parseInt(list.querySelector('.active').getAttribute('data-idx'));
                            let item = items[idx];
                            Swal.fire({
                                title: 'Saat Düzenle',
                                html: `<input id="fet-edit-name-hour" class="swal2-input" value="${item.name || ''}" placeholder="Kısa Ad"><input id="fet-edit-longname-hour" class="swal2-input" value="${item.longName || item.name || ''}" placeholder="Uzun Ad">`,
                                focusConfirm: false,
                                preConfirm: () => {
                                    return {
                                        name: document.getElementById('fet-edit-name-hour').value,
                                        longName: document.getElementById('fet-edit-longname-hour').value
                                    };
                                }
                            }).then(res => {
                                if (res.isConfirmed && res.value.name) {
                                    fetch('/Home/EditHour', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ Index: idx, Name: res.value.name, LongName: res.value.longName })
                                    }).then(r => r.json()).then(j => {
                                        if (j.success) window.fetShowHours();
                                        else Swal.fire('Hata', j.message || 'Düzenleme başarısız', 'error');
                                    });
                                }
                            });
                        } else {
                            Swal.fire('Uyarı', 'Lütfen bir satır seçin', 'warning');
                        }
                    };
                    // Delete
                    document.getElementById('fet-btn-del-hour').onclick = function() {
                        if (list && list.querySelector('.active')) {
                            let idx = parseInt(list.querySelector('.active').getAttribute('data-idx'));
                            Swal.fire({
                                title: 'Silmek istediğinize emin misiniz?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Evet, Sil',
                                cancelButtonText: 'İptal'
                            }).then(res => {
                                if (res.isConfirmed) {
                                    fetch('/Home/DeleteHour', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ Index: idx })
                                    }).then(r => r.json()).then(j => {
                                        if (j.success) window.fetShowHours();
                                        else Swal.fire('Hata', j.message || 'Silme başarısız', 'error');
                                    });
                                }
                            });
                        } else {
                            Swal.fire('Uyarı', 'Lütfen bir satır seçin', 'warning');
                        }
                    };
                }
            });        });
};

// Constraint dialog function
window.openConstraintDialog = function(constraintType) {
    if (constraintType === 'ConstraintActivityPreferredTimeSlots') {
        // Gün ve saatleri ve aktiviteleri paralel çek
        Promise.all([
            fetch('/Home/GetDaysAndHours').then(r => r.json()),
            fetch('/Home/ShowData?dataType=activities').then(r => r.json())
        ]).then(([data, actData]) => {
            if (!data.success) {
                Swal.fire('Hata', data.message || 'Gün ve saatler alınamadı', 'error');
                return;
            }
            if (!actData.success) {
                Swal.fire('Hata', actData.message || 'Aktiviteler alınamadı', 'error');
                return;
            }
            const days = data.days.filter(Boolean);
            const hours = data.hours.filter(Boolean);
            const activities = actData.data || [];
            let forbiddenSlots = new Set();
            // Activity dropdown HTML
            let activityOptions = activities.map(a => {
                let subject = (a.subject !== undefined && a.subject !== null && a.subject !== '') ? a.subject : 'Bilinmiyor';
                let id = (a.id !== undefined && a.id !== null) ? a.id : '-';
                return `<option value="${id}">${id} - ${subject}</option>`;
            }).join('');
            let activityHtml = `<div class='mb-2'><label>Etkinlik:</label><select id='activity-select' class='form-select'>${activityOptions}</select></div>`;
            // Tablo HTML oluştur
            let tableHtml = '<table class="table table-bordered text-center align-middle"><thead><tr><th></th>';
            days.forEach(day => { tableHtml += `<th>${day}</th>`; });
            tableHtml += '</tr></thead><tbody>';
            hours.forEach((hour, hIdx) => {
                tableHtml += `<tr><th>${hour}</th>`;
                days.forEach((day, dIdx) => {
                    const cellId = `${day}-${hour}`;
                    tableHtml += `<td id="cell-${cellId}" style="background:#4caf50;cursor:pointer;" onclick="toggleSlot('${cellId}')"></td>`;
                });
                tableHtml += '</tr>';
            });
            tableHtml += '</tbody></table>';
            // Slot yönetimi
            window.toggleSlot = function(cellId) {
                const td = document.getElementById('cell-' + cellId);
                if (!td) return;
                if (forbiddenSlots.has(cellId)) {
                    forbiddenSlots.delete(cellId);
                    td.style.background = '#4caf50';
                } else {
                    forbiddenSlots.add(cellId);
                    td.style.background = '#e53935';
                }
            };
            Swal.fire({
                title: 'Etkinlik Tercihli Zaman Slotları',
                html: `
                    ${activityHtml}
                    <div class='mb-2'>Kırmızı: Yasaklı, Yeşil: İzinli</div>
                    ${tableHtml}
                `,
                width: '800px',
                showCancelButton: true,
                confirmButtonText: 'Kaydet',
                cancelButtonText: 'İptal',
                preConfirm: () => {
                    let selectedActivityId = parseInt(document.getElementById('activity-select').value);
                    let result = [];
                    forbiddenSlots.forEach(cellId => {
                        const [day, hour] = cellId.split('-');
                        result.push({ Day: day, Hour: hour });
                    });
                    let constraintObj = {
                        Type: constraintType,
                        Comments: document.getElementById('constraint-comments').value || '',
                        WeightPercentage: 100,
                        Active: true,
                        Activity_Id: selectedActivityId,
                        Preferred_Time_Slots: result
                    };
                    return constraintObj;
                }
            }).then(result => {
                if (result.isConfirmed && result.value) {
                    fetch('/Home/AddOrUpdateTimeConstraint', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(result.value)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Başarılı', 'Kısıt başarıyla kaydedildi', 'success');
                            if (data.xmlContent) {
                                window.fetCurrentXmlContent = data.xmlContent;
                            }
                        } else {
                            Swal.fire('Hata', data.message || 'Kısıt kaydedilemedi', 'error');
                        }
                    })
                    .catch(err => {
                        Swal.fire('Sunucu Hatası', 'Kısıt kaydedilemedi: ' + err.message, 'error');
                    });
                }
            });
        });
        return;
    }
    if (constraintType === 'ConstraintStudentsMaxHoursDaily' || constraintType === 'ConstraintStudentsMaxHoursContinuously') {
        const isDaily = constraintType === 'ConstraintStudentsMaxHoursDaily';
        Swal.fire({
            title: isDaily ? 'Öğrenciler Günlük Maksimum Saat' : 'Öğrenciler Aralıksız Maksimum Saat',
            html: `
                <div class="mb-3">
                    <label class="form-label">${isDaily ? 'Günlük Maksimum Ders Saati' : 'Aralıksız Maksimum Ders Saati'}</label>
                    <input type="number" class="form-control" id="max-hours" min="1" max="20" value="6">
                </div>
                <div class="mb-3">
                    <label class="form-label">Yumuşaklık Yüzdesi (%)</label>
                    <input type="number" class="form-control" id="softness" min="1" max="100" value="100">
                </div>
            `,
            width: '400px',
            showCancelButton: true,
            confirmButtonText: 'Kaydet',
            cancelButtonText: 'İptal',
            preConfirm: () => {
                const maxHours = parseInt(document.getElementById('max-hours').value);
                const softness = parseInt(document.getElementById('softness').value);
                if (!maxHours || maxHours < 1) {
                    Swal.showValidationMessage('Geçerli bir maksimum saat girin');
                    return false;
                }
                if (!softness || softness < 1 || softness > 100) {
                    Swal.showValidationMessage('Yumuşaklık yüzdesi 1-100 arası olmalı');
                    return false;
                }
                return {
                    Type: constraintType,
                    MaxHours: maxHours,
                    WeightPercentage: softness,
                    Active: true
                };
            }
        }).then(result => {
            if (result.isConfirmed && result.value) {
                fetch('/Home/AddOrUpdateTimeConstraint', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(result.value)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Başarılı', 'Kısıt başarıyla kaydedildi', 'success');
                        if (data.xmlContent) {
                            window.fetCurrentXmlContent = data.xmlContent;
                        }
                    } else {
                        Swal.fire('Hata', data.message || 'Kısıt kaydedilemedi', 'error');
                    }
                })
                .catch(err => {
                    Swal.fire('Sunucu Hatası', 'Kısıt kaydedilemedi: ' + err.message, 'error');
                });
            }
        });
        return;
    }
    if (constraintType === 'ConstraintMinDaysBetweenActivities') {
        fetch('/Home/ShowData?dataType=activities')
            .then(r => r.json())
            .then(actData => {
                if (!actData.success) {
                    Swal.fire('Hata', actData.message || 'Aktiviteler alınamadı', 'error');
                    return;
                }
                const activities = actData.data || [];
                // Etkinlikleri string olarak göster (görseldeki gibi)
                let activityList = activities.map(a => {
                    let subject = (a.subject !== undefined && a.subject !== null && a.subject !== '') ? a.subject : 'Bilinmiyor';
                    let id = (a.id !== undefined && a.id !== null) ? a.id : '-';
                    return `${id} - ${subject}`;
                });
                // Modal HTML
                let html = `
<div class="d-flex gap-2 mb-2" style="height:220px;">
    <select id="fet-min-days-activity-list" multiple size="12" class="form-select" style="width:48%;font-size:13px;">
        ${activityList.map((txt, i) => `<option value="${activities[i].id}">${txt}</option>`).join('')}
    </select>
    <select id="fet-min-days-activity-selected" multiple size="12" class="form-select" style="width:48%;font-size:13px;"></select>
</div>
<div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-min-days-btn-all">Tümü</button>
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-min-days-btn-clear">Temizle</button>
</div>
<div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-min-days-btn-right">&gt;</button>
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-min-days-btn-left">&lt;</button>
</div>
<div class="mb-2">
    <label>Min days</label>
    <input type="number" class="form-control" id="fet-min-days-value" min="1" max="30" value="1">
</div>
<div class="form-check mb-2">
    <input class="form-check-input" type="checkbox" value="1" id="fet-min-days-consecutive" checked>
    <label class="form-check-label" for="fet-min-days-consecutive">
        If two activities are on the same day, make them consecutive
    </label>
</div>
<div class="mb-2">
    <label>Weight percentage (recommended: 95.0% - 100.0%, allowed: 0.0% - 100.0%)</label>
    <input type="number" class="form-control" id="fet-min-days-weight" min="0" max="100" value="95">
</div>
`;
                Swal.fire({
                    title: 'Etkinlikler Arası Minimum Gün',
                    html: html,
                    width: '900px',
                    showCancelButton: true,
                    confirmButtonText: 'Kısıt Ekle',
                    cancelButtonText: 'Kapat',
                    didOpen: () => {
                        // Buton eventleri
                        const list = document.getElementById('fet-min-days-activity-list');
                        const sel = document.getElementById('fet-min-days-activity-selected');
                        document.getElementById('fet-min-days-btn-all').onclick = function() {
                            // Tümünü sağa aktar
                            sel.innerHTML = list.innerHTML;
                        };
                        document.getElementById('fet-min-days-btn-clear').onclick = function() {
                            sel.innerHTML = '';
                        };
                        document.getElementById('fet-min-days-btn-right').onclick = function() {
                            Array.from(list.selectedOptions).forEach(opt => {
                                if (![...sel.options].some(o => o.value === opt.value)) {
                                    let newOpt = opt.cloneNode(true);
                                    sel.appendChild(newOpt);
                                }
                            });
                        };
                        document.getElementById('fet-min-days-btn-left').onclick = function() {
                            Array.from(sel.selectedOptions).forEach(opt => sel.removeChild(opt));
                        };
                    },
                    preConfirm: () => {
                        const sel = document.getElementById('fet-min-days-activity-selected');
                        const selectedIds = Array.from(sel.options).map(o => parseInt(o.value)).filter(Boolean);
                        const minDays = parseInt(document.getElementById('fet-min-days-value').value);
                        const consecutive = document.getElementById('fet-min-days-consecutive').checked;
                        const weight = parseFloat(document.getElementById('fet-min-days-weight').value);
                        if (!selectedIds.length) {
                            Swal.showValidationMessage('En az bir etkinlik seçmelisiniz');
                            return false;
                        }
                        if (!minDays || minDays < 1) {
                            Swal.showValidationMessage('Geçerli bir minimum gün girin');
                            return false;
                        }
                        if (isNaN(weight) || weight < 0 || weight > 100) {
                            Swal.showValidationMessage('Ağırlık yüzdesi 0-100 arası olmalı');
                            return false;
                        }
                        return {
                            Type: constraintType,
                            Activity_Ids: selectedIds,
                            MinDays: minDays,
                            Consecutive: consecutive,
                            WeightPercentage: weight,
                            Active: true
                        };
                    }
                }).then(result => {
                    if (result.isConfirmed && result.value) {
                        fetch('/Home/AddOrUpdateTimeConstraint', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(result.value)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Başarılı', 'Kısıt başarıyla kaydedildi', 'success');
                                if (data.xmlContent) {
                                    window.fetCurrentXmlContent = data.xmlContent;
                                }
                            } else {
                                Swal.fire('Hata', data.message || 'Kısıt kaydedilemedi', 'error');
                            }
                        })
                        .catch(err => {
                            Swal.fire('Sunucu Hatası', 'Kısıt kaydedilemedi: ' + err.message, 'error');
                        });
                    }
                });
            });
        return;
    }
    if (constraintType === 'ConstraintActivitiesNotOverlapping') {
        fetch('/Home/ShowData?dataType=activities')
            .then(r => r.json())
            .then(actData => {
                if (!actData.success) {
                    Swal.fire('Hata', actData.message || 'Aktiviteler alınamadı', 'error');
                    return;
                }
                const activities = actData.data || [];
                let activityList = activities.map(a => {
                    let subject = (a.subject !== undefined && a.subject !== null && a.subject !== '') ? a.subject : 'Bilinmiyor';
                    let id = (a.id !== undefined && a.id !== null) ? a.id : '-';
                    return `${id} - ${subject}`;
                });
                let html = `
<div class="d-flex gap-2 mb-2" style="height:220px;">
    <select id="fet-not-overlap-activity-list" multiple size="12" class="form-select" style="width:48%;font-size:13px;">
        ${activityList.map((txt, i) => `<option value="${activities[i].id}">${txt}</option>`).join('')}
    </select>
    <select id="fet-not-overlap-activity-selected" multiple size="12" class="form-select" style="width:48%;font-size:13px;"></select>
</div>
<div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-not-overlap-btn-all">Tümü</button>
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-not-overlap-btn-clear">Temizle</button>
</div>
<div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-not-overlap-btn-right">&gt;</button>
    <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="fet-not-overlap-btn-left">&lt;</button>
</div>
<div class="mb-2">
    <label>Weight percentage (recommended: 95.0% - 100.0%, allowed: 0.0% - 100.0%)</label>
    <input type="number" class="form-control" id="fet-not-overlap-weight" min="0" max="100" value="95">
</div>
`;
                Swal.fire({
                    title: 'Etkinlikler Çakışmasın',
                    html: html,
                    width: '900px',
                    showCancelButton: true,
                    confirmButtonText: 'Kısıt Ekle',
                    cancelButtonText: 'Kapat',
                    didOpen: () => {
                        const list = document.getElementById('fet-not-overlap-activity-list');
                        const sel = document.getElementById('fet-not-overlap-activity-selected');
                        document.getElementById('fet-not-overlap-btn-all').onclick = function() {
                            sel.innerHTML = list.innerHTML;
                        };
                        document.getElementById('fet-not-overlap-btn-clear').onclick = function() {
                            sel.innerHTML = '';
                        };
                        document.getElementById('fet-not-overlap-btn-right').onclick = function() {
                            Array.from(list.selectedOptions).forEach(opt => {
                                if (![...sel.options].some(o => o.value === opt.value)) {
                                    let newOpt = opt.cloneNode(true);
                                    sel.appendChild(newOpt);
                                }
                            });
                        };
                        document.getElementById('fet-not-overlap-btn-left').onclick = function() {
                            Array.from(sel.selectedOptions).forEach(opt => sel.removeChild(opt));
                        };
                    },
                    preConfirm: () => {
                        const sel = document.getElementById('fet-not-overlap-activity-selected');
                        const selectedIds = Array.from(sel.options).map(o => parseInt(o.value)).filter(Boolean);
                        const weight = parseFloat(document.getElementById('fet-not-overlap-weight').value);
                        if (!selectedIds.length) {
                            Swal.showValidationMessage('En az bir etkinlik seçmelisiniz');
                            return false;
                        }
                        if (isNaN(weight) || weight < 0 || weight > 100) {
                            Swal.showValidationMessage('Ağırlık yüzdesi 0-100 arası olmalı');
                            return false;
                        }
                        return {
                            Type: constraintType,
                            Activity_Ids: selectedIds,
                            WeightPercentage: weight,
                            Active: true
                        };
                    }
                }).then(result => {
                    if (result.isConfirmed && result.value) {
                        fetch('/Home/AddOrUpdateTimeConstraint', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(result.value)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Başarılı', 'Kısıt başarıyla kaydedildi', 'success');
                                if (data.xmlContent) {
                                    window.fetCurrentXmlContent = data.xmlContent;
                                }
                            } else {
                                Swal.fire('Hata', data.message || 'Kısıt kaydedilemedi', 'error');
                            }
                        })
                        .catch(err => {
                            Swal.fire('Sunucu Hatası', 'Kısıt kaydedilemedi: ' + err.message, 'error');
                        });
                    }
                });
            });
        return;
    }

    const constraintConfig = {
        'ConstraintBasicCompulsoryTime': {
            title: 'Temel Zorunlu Zaman Kısıtı',
            fields: []
        },
        'ConstraintStudentsMaxHoursDaily': {
            title: 'Öğrenciler Günlük Maksimum Saat',
            fields: [
                { name: 'Students', label: 'Öğrenci Grubu', type: 'text', placeholder: 'Örn: 9A, 10B' },
                { name: 'Maximum_Hours_Daily', label: 'Günlük Maksimum Saat', type: 'number', placeholder: '6' }
            ]
        },
        'ConstraintStudentsMaxHoursContinuously': {
            title: 'Öğrenciler Aralıksız Maksimum Saat',
            fields: [
                { name: 'Students', label: 'Öğrenci Grubu', type: 'text', placeholder: 'Örn: 9A, 10B' },
                { name: 'Maximum_Hours_Continuously', label: 'Aralıksız Maksimum Saat', type: 'number', placeholder: '3' }
            ]
        },
        'ConstraintMinDaysBetweenActivities': {
            title: 'Etkinlikler Arası Minimum Gün',
            fields: [
                { name: 'Activity_Id', label: 'Etkinlik ID\'leri (virgülle ayır)', type: 'text', placeholder: '1,2,3' },
                { name: 'MinDays', label: 'Minimum Gün Sayısı', type: 'number', placeholder: '1' }
            ]
        },
        'ConstraintBreakTimes': {
            title: 'Kapatılacak Zaman Bloğu',
            fields: [
                { name: 'Break_Times', label: 'Kapatılacak Zaman Bloğu', type: 'text', placeholder: 'Pazartesi-3,Salı-5' }
            ]
        },
        'ConstraintActivityPreferredTimeSlots': {
            title: 'Etkinlik Tercihli Zaman Slotları',
            fields: [
                { name: 'Activity_Id', label: 'Etkinlik ID', type: 'number', placeholder: '1' },
                { name: 'Preferred_Time_Slots', label: 'Tercihli Zaman Slotları', type: 'text', placeholder: 'Pazartesi-2,Salı-3' }
            ]
        },
        'ConstraintActivitiesNotOverlapping': {
            title: 'Etkinlikler Çakışmasın',
            fields: [
                { name: 'Activity_Id', label: 'Etkinlik ID\'leri (virgülle ayır)', type: 'text', placeholder: '1,2,3' }
            ]
        }
    };

    const config = constraintConfig[constraintType];
    if (!config) {
        Swal.fire('Hata', 'Geçersiz kısıt türü', 'error');
        return;
    }

    // Generate form HTML
    let formHtml = `
        <div class="mb-3">
            <label class="form-label">Ağırlık (%)</label>
            <input type="number" class="form-control" id="constraint-weight" value="100" min="1" max="100">
        </div>
        <div class="mb-3">
            <label class="form-label">Aktif</label>
            <select class="form-select" id="constraint-active">
                <option value="true">Evet</option>
                <option value="false">Hayır</option>
            </select>
        </div>
    `;

    // Add specific fields for this constraint type
    config.fields.forEach(field => {
        formHtml += `
            <div class="mb-3">
                <label class="form-label">${field.label}</label>
                <input type="${field.type}" class="form-control" id="constraint-${field.name}" placeholder="${field.placeholder || ''}">
            </div>
        `;
    });

    formHtml += `
        <div class="mb-3">
            <label class="form-label">Açıklama</label>
            <textarea class="form-control" id="constraint-comments" rows="2"></textarea>
        </div>
    `;

    Swal.fire({
        title: config.title,
        html: formHtml,
        width: '600px',
        showCancelButton: true,
        confirmButtonText: 'Kaydet',
        cancelButtonText: 'İptal',
        preConfirm: () => {
            // Get form values
            const constraintData = {
                Type: constraintType,
                WeightPercentage: parseFloat(document.getElementById('constraint-weight').value) || 100,
                Active: document.getElementById('constraint-active').value === 'true',
                Comments: document.getElementById('constraint-comments').value || ''
            };

            // Get specific field values
            config.fields.forEach(field => {
                const element = document.getElementById(`constraint-${field.name}`);
                if (element) {
                    if (field.type === 'number') {
                        constraintData[field.name] = parseInt(element.value) || 0;
                    } else if (field.name === 'Activity_Id' && constraintType !== 'ConstraintActivityPreferredTimeSlots') {
                        // Multiple activity IDs (comma separated)
                        constraintData[field.name] = element.value.split(',').map(x => parseInt(x.trim())).filter(x => !isNaN(x));
                    } else if (field.name === 'Activity_Id' && constraintType === 'ConstraintActivityPreferredTimeSlots') {
                        // Single activity ID
                        constraintData[field.name] = parseInt(element.value) || 0;
                    } else if (field.name === 'Break_Times') {
                        // Parse break times: "Pazartesi-3,Salı-5" format
                        constraintData[field.name] = element.value.split(',').map(x => {
                            const [day, hour] = x.split('-');
                            return { Day: day.trim(), Hour: parseInt(hour) };
                        }).filter(x => x.Day && !isNaN(x.Hour));
                    } else if (field.name === 'Preferred_Time_Slots') {
                        // Parse preferred time slots: "Pazartesi-2,Salı-3" format
                        constraintData[field.name] = element.value.split(',').map(x => {
                            const [day, hour] = x.split('-');
                            return { Day: day.trim(), Hour: parseInt(hour) };
                        }).filter(x => x.Day && !isNaN(x.Hour));
                    } else {
                        constraintData[field.name] = element.value;
                    }
                }
            });

            return constraintData;
        }
    }).then(result => {
        if (result.isConfirmed && result.value) {
            // Send constraint data to server
            fetch('/Home/AddOrUpdateTimeConstraint', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(result.value)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Başarılı', 'Kısıt başarıyla kaydedildi', 'success');
                    // Update the XML content if provided
                    if (data.xmlContent) {
                        window.fetCurrentXmlContent = data.xmlContent;
                        window.saveToLocal();
                    }
                } else {
                    Swal.fire('Hata', data.message || 'Kısıt kaydedilemedi', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Hata', 'Bir hata oluştu', 'error');
            });
        }
    });
};
</script>

